// ---------- Generators & datasource ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum ListingStatus {
  OPEN
  REVIEWING
  ACCEPTED
  FULFILLED
  EXPIRED
}

// ---------- Core models ----------
model User {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String?
  username     String?   @unique
  image        String?
  passwordHash String?
  emailVerified DateTime?   // <-- add this line
  createdAt    DateTime  @default(now())

  accounts  Account[]
  sessions  Session[]
  listings  BuyerListing[]

  Offer Offer[]
}

enum OfferStatus {
  ACTIVE
  ACCEPTED
  DECLINED
  WITHDRAWN
}

model BuyerListing {
  id          String        @id @default(cuid())
  buyerId     String
  buyer       User          @relation(fields: [buyerId], references: [id])
  title       String
  description String
  photos      String[]      // URLs for MVP
  budgetMin   Int?
  budgetMax   Int?
  location    String?       // optional
  status      ListingStatus @default(OPEN)
  createdAt   DateTime      @default(now())
  offers      Offer[]
}

model Offer {
  id         String   @id @default(cuid())
  listingId  String
  listing    BuyerListing @relation(fields: [listingId], references: [id])
  sellerId   String
  seller     User     @relation(fields: [sellerId], references: [id])
  priceCents Int
  note       String?
  status     OfferStatus @default(ACTIVE)
  createdAt  DateTime @default(now())
}

// ---------- NextAuth adapter models ----------
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
